generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "cockroachdb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user              User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id               String          @id @default(cuid())
  name             String?         @unique
  email            String?         @unique
  emailVerified    DateTime?
  backgroundStyles String?         @default("bg-[#ffffff] text-[#000000]")
  buttonStyles     String?         @default("bg-[#000000] text-[#ffffff]")
  question         String?
  image            String?
  membership       String?
  messageType      String?         @default("text")
  Account          Account[]
  Messages         Messages[]
  Session          Session[]
  UserAnalytics    UserAnalytics?
  UserMembership   UserMembership?
}

model Messages {
  id                 String  @id @default(cuid())
  status             String?
  timestamp          String?
  text_message       String?
  type               String?
  voice_message_url  String?
  hints              String?
  userId             String
  userRelation1      User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model UserAnalytics {
  id             String @unique @default(cuid())
  page_views     Int?   @default(0)
  page_clicks    Int?   @default(0)
  responses      Int?   @default(0)
  spam           Int?   @default(0)
  userId         String @unique
  userRelation2  User?  @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model UserMembership {
  id                  String  @unique @default(cuid())
  membership          String?
  membershipStartDate String?
  membershipEndDate   String?
  paymentIntent       String?
  userId              String  @unique
  userRelation3       User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
